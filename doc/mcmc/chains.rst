.. index:: MCMCChains

.. _section-MCMCChains:

MCMCChains
----------

The ``MCMCChains`` type stores output from one or more runs (chains) of an MCMC sampler.  It serves as the container for output generated by the :func:`mcmc` function, and supplies methods for convergence diagnostics and posterior inference.  Moreover, it can be used as a stand-alone container for any user-generated MCMC output, and is thus a **julia** analogue to the `boa` :cite:`smith:2007:BOA,smith:2008:BOA` and `coda` :cite:`plummer:2006:CDO,plummer:2012:CDO` **R** packages.

Declaration
^^^^^^^^^^^

``immutable MCMCChains``

Fields
^^^^^^

* ``value::Array{VariateType,3}`` : a 3-dimensional array of sampled values whose first, second, and third dimensions index the iterations, parameter elements, and runs of an MCMC sampler, respectively.
* ``names::Vector{String}`` : names assigned to the parameter elements.
* ``range::Range{Int}`` : range of iterations stored in the rows of the ``value`` array.
* ``model::MCMCModel`` : the model from which the sampled values were generated.

Constructors
^^^^^^^^^^^^

.. function:: MCMCChains(iters::Integer, params::Integer; \
			    start::Integer=1, thin::Integer=1, chains::Integer=1, \
			    names::Vector{T<:String}=Array(String,0), model::MCMCModel=MCMCModel())
              MCMCChains(value::Array{T<:Real,3}; \
			    start::Integer=1, thin::Integer=1, names::Vector{U<:String}=Array(String,0), \
			    model::MCMCModel=MCMCModel())
			  MCMCChains(value::Matrix{T<:Real}; \
			    start::Integer=1, thin::Integer=1, names::Vector{U<:String}=Array(String,0), \
			    model::MCMCModel=MCMCModel())
			  MCMCChains(value::Vector{T<:Real}; \
			    start::Integer=1, thin::Integer=1, names::String="Param1", \
			    model::MCMCModel=MCMCModel())
		
	Construct an ``MCMCChains`` object that stores MCMC sampler output.
	
	**Arguments**
	
		* ``iters`` : total number of iterations in each sampler run, of which ``length(start:thin:iters)`` outputted iterations will be stored in the object.
		* ``params`` : number of parameters to store.
		* ``value`` : an array whose first, second (optional), and third (optional) dimensions index outputted iterations, parameter elements, and runs of an MCMC sampler, respectively.
		* ``start`` : number of the first iteration to be stored.
		* ``thin`` : number of steps between consecutive iterations to be stored.
		* ``chains`` : number of simulation runs for which to store output.
		* ``names`` : names to assign to the parameter elements (default: ``"Param1"``, ``"Param2"``, ...).
		* ``model`` : the model for which the simulation was run.
		
	**Value**
	
		Returns an ``MCMCChains`` type object.

	**Example**
	
		See the :ref:`AMM <example-amm>`, :ref:`AMWG <example-amwg>`, :ref:`NUTS <example-nuts>`, :ref:`Slice <example-slice>`, and :ref:`SliceWG <example-slicewg>` examples.
	
Methods
^^^^^^^

.. function:: autocor(c::MCMCChains; lags::Vector=[1,5,10,50], relative::Bool=true)

	Compute lag-k autocorrelation for MCMC sampler output.
	
	**Arguments**
	
		* ``c`` : sampler output on which to perform calculations.
		* ``lags`` : lags at which to compute autocorrelations.
		* ``relative`` : whether the lags are relative to the thinning interval of the output (``true``) or relative to the absolute iteration numbers (``false``).
		
	**Value**
	
		A ``ChainSummary`` type object of the form:
		
		.. index:: ChainSummary
		
		.. code-block:: julia
		
			immutable ChainSummary
			  value::Array{Float64,3}
			  rownames::Vector{String}
			  colnames::Vector{String}
			  header::String
			end

		with model parameters indexed by the first dimension of ``value``, lag-autocorrelations by the second, and chains by the third.
		
	**Example**
	
		See the :ref:`section-Line-Inference` section of the tutorial.

.. function:: cor(c::MCMCChains)

	Compute cross-correlations for MCMC sampler output.
	
	**Arguments**
	
		* ``c`` : sampler output on which to perform calculations.
		
	**Value**
	
		A ``ChainSummary`` type object with the first and second dimensions of the ``value`` field indexing the model parameters between which correlations.  Results are for all chains combined.

	**Example**
	
		See the :ref:`section-Line-Inference` section of the tutorial.

.. function:: describe(c::MCMCChains; q::Vector=[0.025, 0.25, 0.5, 0.75, 0.975], \
                etype=:bm, args...)
				
	Compute summary statistics for MCMC sampler output.
	
	**Arguments**
	
		* ``c`` : sampler output on which to perform calculations.
		* ``q`` : probabilities at which to calculate quantiles.
		* ``etype`` : method for computing Monte Carlo standard errors.  See :func:`mcse` for options.
		* ``args...`` : additional arguments to be passed to the ``etype`` method.
		
	**Value**
	
		A tuple of results from calls to ``summarystats(c, etype, args...)`` and ``quantile(c, q)``, respectively.  Results are for all chains combined.

	**Example**
	
		See the :ref:`section-Line-Inference` section of the tutorial.

.. function:: dic(c::MCMCChains)

	Compute the Deviance Information Criterion (DIC) of Spiegelhalter et al. :cite:`spiegelhalter:2002:BMM` and Gelman et al. :cite:`gelman:2013:bda` from MCMC sampler output.
	
	**Arguments**
	
		* ``c`` : sampler output on which to perform calculations.
		
	**Value**
	
		A ``ChainSummary`` type object with DIC results from the methods of Spiegelhalter and Gelman in the first and second rows of the ``value`` field, and the DIC value and effective numbers of parameters in the first and second columns.  Results are for all chains combined.

	**Example**
	
		See the :ref:`section-Line-Inference` section of the tutorial.

.. function:: draw(p::Array{Plot}; fmt::Symbol=:svg, \
			    filename::String="chainplot."string(fmt), \
			    width::MeasureOrNumber=8inch, height::MeasureOrNumber=8inch, \
			    nrow::Integer=3, ncol::Integer=2, byrow::Bool=true)

  Draw (write to a file) plots produced by :func:`plot`.  Plots are arranged in a matrix (default: 3x2).
	
	**Arguments**
	
		* ``p`` : array of plots to be drawn.
		* ``fmt`` : plotting format. Options are
			* ``:svg`` : Scalable Vector Graphics (.svg).
			* ``:pdf`` : Portable Document Format (.pdf).
			* ``:png`` : Portable Network Graphics (.png).
			* ``:ps``  : Postscript (.ps).
		* ``filename`` : produces output in a file with this name.
		* ``width`` : plot width.
		* ``height`` : plot height.
		* ``nrow`` : number of rows in output matrix.
		* ``ncol`` : number of columns in output matrix.
		* ``byrow`` : whether the matrix should be filled by row.
		
	**Value**
	
		Draws plots to file

.. function:: gelmandiag(c::MCMCChains; alpha::Real=0.05, mpsrf::Bool=false, \
				transform::Bool=false)
	
	Compute the convergence diagnostic of Brooks, Gelman, and Rubin :cite:`brooks:1998:GMM,gelman:1992:IIS` for MCMC sampler output.
	
	**Arguments**
	
		* ``c`` : sampler output on which to perform calculations.
		* ``alpha`` : quantile (``1 - alpha / 2``) at which to estimate the upper limits of scale reduction factors.
		* ``mpsrf`` : whether to compute the multivariate potential scale reduction factor.
		
	**Value**
	
		A ``ChainSummary`` type object with parameters contained in the rows of the ``value`` field, and scale reduction factors and upper-limit quantiles in the first and second columns.

	**Example**
	
		See the :ref:`section-Line-Inference` section of the tutorial.

.. function:: getindex(c::MCMCChains, inds...)

	Subset MCMC sampler output.  The syntax ``c[i, j, k]`` is converted to ``getindex(c, i, j, k)``.
	
	**Arguments**
	
		* ``c`` : sampler output to subset.
		* ``inds...`` : a tuple of ``i, j, k`` indices to the iterations, parameters, and chains to be subsetted.  Indices of the form ``start:stop`` or ``start:thin:stop`` can be used to subset iterations, where ``start`` and ``stop`` define a range for the subset and ``thin`` will apply additional thinning to existing sampler output.  Indices for subsetting of parameters can be specified as strings, integers, or booleans identifying parameters to be kept.  Indices for chains can be integers or booleans.  A value of ``:`` can be specified for any of the dimensions to indicate no subsetting.
		
	**Value**
	
		Returns an ``MCMCChains`` object with the subsetted sampler output.
		
	**Example**
	
		See the :ref:`section-Line-Inference` section of the tutorial.

.. function:: gewekediag(c::MCMCChains; first::Real=0.1, last::Real=0.5, \
                etype=:imse, args...)
	
	Compute the convergence diagnostic of Geweke :cite:`geweke:1992:EAS` for MCMC sampler output.
	
	**Arguments**
	
		* ``c`` : sampler output on which to perform calculations.
		* ``first`` : Proportion of iterations to include in the first window.
		* ``last`` : Proportion of iterations to include in the last window.
		* ``etype`` : method for computing Monte Carlo standard errors.  See :func:`mcse` for options.
		* ``args...`` : additional arguments to be passed to the ``etype`` method.
		
	**Value**
	
		A ``ChainSummary`` type object with parameters contained in the rows of the ``value`` field, and Z-scores and p-values in the first and second columns.  Results are chain-specific.

.. function:: hpd(c::MCMCChains; alpha::Real=0.05)

	Compute highest posterior density (HPD) intervals of Chen and Shao :cite:`chen:1999:MCE` for MCMC sampler output.
	
	**Arguments**
	
		* ``c`` : sampler output on which to perform calculations.
		* ``alpha`` : the ``100 * (1 - alpha)``\% interval to compute.
		
	**Value**
	
		A ``ChainSummary`` type object with parameters contained in the rows of the ``value`` field, and lower and upper intervals in the first and second columns.  Results are for all chains combined.

	**Example**
	
		See the :ref:`section-Line-Inference` section of the tutorial.

.. function:: mcse(x::Vector{T<:Real}, method::Symbol=:imse; args...)

	Compute Monte Carlo standard errors.
	
	**Arguments**
	
		* ``x`` : a time series of values on which to perform calculations.
		* ``method`` : method used for the calculations.  Options are
			* ``:bm`` : batch means :cite:`glynn:1991:EAV`, with optional argument ``size::Integer=100`` determining the number of sequential values to include in each batch.
			* ``:imse`` : initial monotone sequence estimator :cite:`geyer:1992:PMC`.
			* ``:ipse`` : initial positive sequence estimator :cite:`geyer:1992:PMC`.
		* ``args...`` : additional arguments for the calculation method.
		
	**Value**
	
		The numeric standard error value.

.. function:: plot(c::MCMCChains, ptype::Symbol=:summary; args...)

	Various plots to summarize a ``MCMCChains`` object.  Separate plots are produced for each parameter. 
	
	**Arguments**
	
		* ``c`` : sampler output to plot.
		* ``ptype`` : plot type.  Options are
			* ``:autocor`` : autocorrelation plots, with optional argument ``maxlag::Integer=100`` determining the maximum autocorrelation lag to plot.  Lags are plotted relative to the thinning interval of the output.
			* ``:density`` : density plots.  Optional argument ``trim::(Real,Real)=(.01,.99)`` trims off lower and upper quantiles of density.
			* ``:mean`` : running mean plots.
			* ``:summary`` : trace and density plots.
			* ``:trace`` : trace plots.
		* ``args...`` : additional arguments to be passed to the ``ptype`` method.  In addition to the options described above, the following global one is also available:
			* ``legend::Bool`` : whether to include legends in the plots to identify chain-specific results (default: ``false``).
			
	**Value**
	
		An array of plots that can be saved to a file with :func:`draw`.

.. function:: quantile(c::MCMCChains; q::Vector=[0.025, 0.25, 0.5, 0.75, 0.975])

	Compute posterior quantiles for MCMC sampler output.
	
	**Arguments**
	
		* ``c`` : sampler output on which to perform calculations.
		* ``q`` : probabilities at which to compute quantiles.
		
	**Value**
	
		A ``ChainSummary`` type object with parameters contained in the rows of the ``value`` field, and quantiles in the columns.  Results are for all chains combined.

.. function:: setindex!(c::MCMCChains, value, inds...)

	Store MCMC sampler output at a given index.  The syntax ``c[i, j, k] = value`` is converted to ``setindex!(c, value, i, j, k)``.
	
	**Arguments**
	
		* ``c`` : object within which to store sampler output.
		* ``value`` : sampler output.
		* ``inds...`` : a tuple of ``i, j, k`` indices to iterations, parameters, and chains within the object.  Iterations can be indexed as a ``start:stop`` or ``start:thin:stop`` range, a single numeric index, or a vector of indices; and are taken to be relative to the index range store in the ``c.range`` field.  Indices for subsetting of parameters can be specified as strings, integers, or booleans.  Indices for chains can be integers or booleans.  A value of ``:`` can be specified for the parameters or chains to index all corresponding elements.
		
	**Value**
	
		Returns an ``MCMCChains`` object with the sampler output stored in the specified indices.

	**Example**
	
		See the :ref:`AMM <example-amm>`, :ref:`AMWG <example-amwg>`, :ref:`NUTS <example-nuts>`, :ref:`Slice <example-slice>`, and :ref:`SliceWG <example-slicewg>` examples.
		
.. function:: summarystats(c::MCMCChains; etype=:bm, args...)

	Compute posterior summary statistics for MCMC sampler output.
	
	**Arguments**
	
		* ``c`` : sampler output on which to perform calculations.
		* ``etype`` : method for computing Monte Carlo standard errors.  See :func:`mcse` for options.
		* ``args...`` : additional arguments to be passed to the ``etype`` method.
		
	**Value**
	
		A ``ChainSummary`` type object with parameters in the rows of the ``value`` field; and the sample mean, standard deviation, standard error, Monte Carlo standard error, and effective sample size in the columns.  Results are for all chains combined.
